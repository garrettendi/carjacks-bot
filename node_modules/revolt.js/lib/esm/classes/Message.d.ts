import { MessageWebhook as ApiMessageWebhook, DataEditMessage, DataMessageSend } from "revolt-api";
import { MessageCollection } from "../collections/index.js";
import { Client, File } from "../index.js";
/**
 * Message Class
 */
export declare class Message {
    #private;
    readonly id: string;
    /**
     * Construct Message
     * @param collection Collection
     * @param id Message Id
     */
    constructor(collection: MessageCollection, id: string);
    /**
     * Whether this object exists
     */
    get $exists(): boolean;
    /**
     * Time when this message was posted
     */
    get createdAt(): Date;
    /**
     * Absolute pathname to this message in the client
     */
    get path(): string;
    /**
     * URL to this message
     */
    get url(): string;
    /**
     * Nonce value
     */
    get nonce(): string | undefined;
    /**
     * Id of channel this message was sent in
     */
    get channelId(): string;
    /**
     * Channel this message was sent in
     */
    get channel(): import("./Channel.js").Channel | undefined;
    /**
     * Server this message was sent in
     */
    get server(): import("./Server.js").Server | undefined;
    /**
     * Member this message was sent by
     */
    get member(): import("./ServerMember.js").ServerMember | undefined;
    /**
     * Id of user or webhook this message was sent by
     */
    get authorId(): string | undefined;
    /**
     * User this message was sent by
     */
    get author(): import("./User.js").User | undefined;
    /**
     * Webhook information for this message
     */
    get webhook(): MessageWebhook;
    /**
     * Content
     */
    get content(): string;
    /**
     * System message content
     */
    get systemMessage(): import("./SystemMessage.js").SystemMessage | undefined;
    /**
     * Attachments
     */
    get attachments(): File[] | undefined;
    /**
     * Time at which this message was edited
     */
    get editedAt(): Date | undefined;
    /**
     * Embeds
     */
    get embeds(): import("./MessageEmbed.js").MessageEmbed[] | undefined;
    /**
     * IDs of users this message mentions
     */
    get mentionIds(): string[] | undefined;
    /**
     * Whether this message mentions us
     */
    get mentioned(): boolean | undefined;
    /**
     * IDs of messages this message replies to
     */
    get replyIds(): string[] | undefined;
    /**
     * Reactions
     */
    get reactions(): import("@solid-primitives/map").ReactiveMap<string, import("@solid-primitives/set").ReactiveSet<string>>;
    /**
     * Interactions
     */
    get interactions(): {
        reactions?: string[] | null | undefined;
        restrict_reactions?: boolean | undefined;
    } | undefined;
    /**
     * Masquerade
     */
    get masquerade(): {
        name?: string | null | undefined;
        avatar?: string | null | undefined;
        colour?: string | null | undefined;
    } | undefined;
    /**
     * Flags
     */
    get flags(): number;
    /**
     * Get the username for this message
     */
    get username(): string | undefined;
    /**
     * Get the role colour for this message
     */
    get roleColour(): string | null | undefined;
    /**
     * Get the avatar URL for this message
     */
    get avatarURL(): string | undefined;
    /**
     * Get the animated avatar URL for this message
     */
    get animatedAvatarURL(): string | undefined;
    /**
     * Avatar URL from the masquerade
     */
    get masqueradeAvatarURL(): string | undefined;
    /**
     * Whether this message has suppressed desktop/push notifications
     */
    get isSuppressed(): boolean;
    /**
     * Edit a message
     * @param data Message edit route data
     */
    edit(data: DataEditMessage): Promise<{
        _id: string;
        nonce?: string | null | undefined;
        channel: string;
        author: string;
        user?: {
            _id: string;
            username: string;
            discriminator: string;
            display_name?: string | null | undefined;
            avatar?: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | null | undefined;
            relations?: {
                _id: string;
                status: "None" | "User" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
            }[] | undefined;
            badges?: number | undefined;
            status?: {
                text?: string | null | undefined;
                presence?: "Invisible" | "Online" | "Idle" | "Focus" | "Busy" | null | undefined;
            } | null | undefined;
            flags?: number | undefined;
            privileged?: boolean | undefined;
            bot?: {
                owner: string;
            } | null | undefined;
            relationship: "None" | "User" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
            online: boolean;
        } | null | undefined;
        member?: {
            _id: {
                server: string;
                user: string;
            };
            joined_at: string;
            nickname?: string | null | undefined;
            avatar?: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | null | undefined;
            roles?: string[] | undefined;
            timeout?: string | null | undefined;
        } | null | undefined;
        webhook?: {
            name: string;
            avatar?: string | null | undefined;
        } | null | undefined;
        content?: string | null | undefined;
        system?: {
            type: "text";
            content: string;
        } | {
            type: "user_added";
            id: string;
            by: string;
        } | {
            type: "user_remove";
            id: string;
            by: string;
        } | {
            type: "user_joined";
            id: string;
        } | {
            type: "user_left";
            id: string;
        } | {
            type: "user_kicked";
            id: string;
        } | {
            type: "user_banned";
            id: string;
        } | {
            type: "channel_renamed";
            name: string;
            by: string;
        } | {
            type: "channel_description_changed";
            by: string;
        } | {
            type: "channel_icon_changed";
            by: string;
        } | {
            type: "channel_ownership_changed";
            from: string;
            to: string;
        } | {
            type: "message_pinned";
            id: string;
            by: string;
        } | {
            type: "message_unpinned";
            id: string;
            by: string;
        } | null | undefined;
        attachments?: {
            _id: string;
            tag: string;
            filename: string;
            metadata: {
                type: "File";
            } | {
                type: "Text";
            } | {
                type: "Image";
                width: number;
                height: number;
            } | {
                type: "Video";
                width: number;
                height: number;
            } | {
                type: "Audio";
            };
            content_type: string;
            size: number;
            deleted?: boolean | null | undefined;
            reported?: boolean | null | undefined;
            message_id?: string | null | undefined;
            user_id?: string | null | undefined;
            server_id?: string | null | undefined;
            object_id?: string | null | undefined;
        }[] | null | undefined;
        edited?: string | null | undefined;
        embeds?: ({
            type: "Website";
            url?: string | null | undefined;
            original_url?: string | null | undefined;
            special?: {
                type: "None";
            } | {
                type: "GIF";
            } | {
                type: "YouTube";
                id: string;
                timestamp?: string | null | undefined;
            } | {
                type: "Lightspeed";
                content_type: "Channel";
                id: string;
            } | {
                type: "Twitch";
                content_type: "Channel" | "Video" | "Clip";
                id: string;
            } | {
                type: "Spotify";
                content_type: string;
                id: string;
            } | {
                type: "Soundcloud";
            } | {
                type: "Bandcamp";
                content_type: "Album" | "Track";
                id: string;
            } | {
                type: "AppleMusic";
                album_id: string;
                track_id?: string | null | undefined;
            } | {
                type: "Streamable";
                id: string;
            } | null | undefined;
            title?: string | null | undefined;
            description?: string | null | undefined;
            image?: {
                url: string;
                width: number;
                height: number;
                size: "Large" | "Preview";
            } | null | undefined;
            video?: {
                url: string;
                width: number;
                height: number;
            } | null | undefined;
            site_name?: string | null | undefined;
            icon_url?: string | null | undefined;
            colour?: string | null | undefined;
        } | {
            type: "Image";
            url: string;
            width: number;
            height: number;
            size: "Large" | "Preview";
        } | {
            type: "Video";
            url: string;
            width: number;
            height: number;
        } | {
            type: "Text";
            icon_url?: string | null | undefined;
            url?: string | null | undefined;
            title?: string | null | undefined;
            description?: string | null | undefined;
            media?: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | null | undefined;
            colour?: string | null | undefined;
        } | {
            type: "None";
        })[] | null | undefined;
        mentions?: string[] | null | undefined;
        replies?: string[] | null | undefined;
        reactions?: {
            [key: string]: string[];
        } | undefined;
        interactions?: {
            reactions?: string[] | null | undefined;
            restrict_reactions?: boolean | undefined;
        } | undefined;
        masquerade?: {
            name?: string | null | undefined;
            avatar?: string | null | undefined;
            colour?: string | null | undefined;
        } | null | undefined;
        pinned?: boolean | null | undefined;
        flags?: number | undefined;
    }>;
    /**
     * Delete a message
     */
    delete(): Promise<undefined>;
    /**
     * Acknowledge this message as read
     */
    ack(): void;
    /**
     * Reply to Message
     */
    reply(data: string | (Omit<DataMessageSend, "nonce"> & {
        nonce?: string;
    }), mention?: boolean): Promise<Message> | undefined;
    /**
     * Clear all reactions from this message
     */
    clearReactions(): Promise<undefined>;
    /**
     * React to a message
     * @param emoji Unicode or emoji ID
     */
    react(emoji: string): Promise<undefined>;
    /**
     * Un-react from a message
     * @param emoji Unicode or emoji ID
     */
    unreact(emoji: string): Promise<undefined>;
}
/**
 * Message Webhook Class
 */
export declare class MessageWebhook {
    #private;
    readonly id: string;
    readonly name: string;
    readonly avatar?: File;
    /**
     * Construct Message Webhook
     * @param client Client
     * @param webhook Webhook data
     */
    constructor(client: Client, webhook: ApiMessageWebhook, id: string);
    /**
     * Get the avatar URL for this message webhook
     */
    get avatarURL(): string;
}
//# sourceMappingURL=Message.d.ts.map