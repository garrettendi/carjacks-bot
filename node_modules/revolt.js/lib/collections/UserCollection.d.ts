import type { User as APIUser } from "revolt-api";
import type { Client } from "../Client.js";
import { User } from "../classes/User.js";
import type { HydratedUser } from "../hydration/user.js";
import { ClassCollection } from "./Collection.js";
/**
 * Collection of Users
 */
export declare class UserCollection extends ClassCollection<User, HydratedUser> {
    /**
     * Construct User collection
     */
    constructor(client: Client);
    /**
     * Fetch user by ID
     * @param id Id
     * @returns User
     */
    fetch(id: string): Promise<User>;
    /**
     * Get or create
     * @param id Id
     * @param data Data
     * @param isNew Whether this object is new
     */
    getOrCreate(id: string, data: APIUser): User;
    /**
     * Get or return partial
     * @param id Id
     */
    getOrPartial(id: string): User | undefined;
}
//# sourceMappingURL=UserCollection.d.ts.map