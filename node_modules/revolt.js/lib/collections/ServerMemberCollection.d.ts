import type { Member, MemberCompositeKey } from "revolt-api";
import { ServerMember } from "../classes/ServerMember.js";
import type { HydratedServerMember } from "../hydration/serverMember.js";
import { ClassCollection } from "./Collection.js";
/**
 * Collection of Server Members
 */
export declare class ServerMemberCollection extends ClassCollection<ServerMember, HydratedServerMember> {
    /**
     * Check if member exists by composite key
     * @param id Id
     * @returns Whether it exists
     */
    hasByKey(id: MemberCompositeKey): boolean;
    /**
     * Get member by composite key
     * @param id Id
     * @returns Member
     */
    getByKey(id: MemberCompositeKey): ServerMember | undefined;
    /**
     * check partial status by composite key
     * @param id Id
     * @returns Member
     */
    isPartialByKey(id: MemberCompositeKey): boolean;
    /**
     * Fetch server member by Id
     * @param serverId Server Id
     * @param userId User Id
     * @returns Message
     */
    fetch(serverId: string, userId: string): Promise<ServerMember>;
    /**
     * Get or create
     * @param id Id
     * @param data Data
     */
    getOrCreate(id: MemberCompositeKey, data: Member): ServerMember;
    /**
     * Get or return partial
     * @param id Id
     */
    getOrPartial(id: MemberCompositeKey): ServerMember | undefined;
}
//# sourceMappingURL=ServerMemberCollection.d.ts.map