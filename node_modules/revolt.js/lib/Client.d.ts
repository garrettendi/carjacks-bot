import type { Accessor } from "solid-js";
import { AsyncEventEmitter } from "@vladfrangu/async_event_emitter";
import { API } from "revolt-api";
import type { DataLogin, RevoltConfig, Role } from "revolt-api";
import type { Channel } from "./classes/Channel.js";
import type { Emoji } from "./classes/Emoji.js";
import type { Message } from "./classes/Message.js";
import type { Server } from "./classes/Server.js";
import type { ServerMember } from "./classes/ServerMember.js";
import type { User } from "./classes/User.js";
import { AccountCollection } from "./collections/AccountCollection.js";
import { BotCollection } from "./collections/BotCollection.js";
import { ChannelCollection } from "./collections/ChannelCollection.js";
import { ChannelUnreadCollection } from "./collections/ChannelUnreadCollection.js";
import { ChannelWebhookCollection } from "./collections/ChannelWebhookCollection.js";
import { EmojiCollection } from "./collections/EmojiCollection.js";
import { MessageCollection } from "./collections/MessageCollection.js";
import { ServerCollection } from "./collections/ServerCollection.js";
import { ServerMemberCollection } from "./collections/ServerMemberCollection.js";
import { SessionCollection } from "./collections/SessionCollection.js";
import { UserCollection } from "./collections/UserCollection.js";
import { EventClient, type EventClientOptions } from "./events/EventClient.js";
import type { HydratedChannel } from "./hydration/channel.js";
import type { HydratedEmoji } from "./hydration/emoji.js";
import type { HydratedMessage } from "./hydration/message.js";
import type { HydratedServer } from "./hydration/server.js";
import type { HydratedServerMember } from "./hydration/serverMember.js";
import type { HydratedUser } from "./hydration/user.js";
export type Session = {
    _id: string;
    token: string;
    user_id: string;
} | string;
/**
 * Events provided by the client
 */
export type Events = {
    error: [error: any];
    connected: [];
    connecting: [];
    disconnected: [];
    ready: [];
    logout: [];
    messageCreate: [message: Message];
    messageUpdate: [message: Message, previousMessage: HydratedMessage];
    messageDelete: [message: HydratedMessage];
    messageDeleteBulk: [messages: HydratedMessage[], channel?: Channel];
    messageReactionAdd: [message: Message, userId: string, emoji: string];
    messageReactionRemove: [message: Message, userId: string, emoji: string];
    messageReactionRemoveEmoji: [message: Message, emoji: string];
    channelCreate: [channel: Channel];
    channelUpdate: [channel: Channel, previousChannel: HydratedChannel];
    channelDelete: [channel: HydratedChannel];
    channelGroupJoin: [channel: Channel, user: User];
    channelGroupLeave: [channel: Channel, user?: User];
    channelStartTyping: [channel: Channel, user?: User];
    channelStopTyping: [channel: Channel, user?: User];
    channelAcknowledged: [channel: Channel, messageId: string];
    serverCreate: [server: Server];
    serverUpdate: [server: Server, previousServer: HydratedServer];
    serverDelete: [server: HydratedServer];
    serverLeave: [server: HydratedServer];
    serverRoleUpdate: [server: Server, roleId: string, previousRole: Role];
    serverRoleDelete: [server: Server, roleId: string, role: Role];
    serverMemberUpdate: [
        member: ServerMember,
        previousMember: HydratedServerMember
    ];
    serverMemberJoin: [member: ServerMember];
    serverMemberLeave: [member: HydratedServerMember];
    userUpdate: [user: User, previousUser: HydratedUser];
    userSettingsUpdate: [id: string, update: Record<string, [number, string]>];
    emojiCreate: [emoji: Emoji];
    emojiDelete: [emoji: HydratedEmoji];
};
/**
 * Client options object
 */
export type ClientOptions = Partial<EventClientOptions> & {
    /**
     * Base URL of the API server
     */
    baseURL: string;
    /**
     * Whether to allow partial objects to emit from events
     * @default false
     */
    partials: boolean;
    /**
     * Whether to eagerly fetch users and members for incoming events
     * @default true
     * @deprecated
     */
    eagerFetching: boolean;
    /**
     * Whether to automatically sync unreads information
     * @default false
     */
    syncUnreads: boolean;
    /**
     * Whether to reconnect when disconnected
     * @default true
     */
    autoReconnect: boolean;
    /**
     * Whether to rewrite sent messages that include identifiers such as @silent
     * @default true
     */
    messageRewrites: boolean;
    /**
     * Retry delay function
     * @param retryCount Count
     * @returns Delay in seconds
     * @default (2^x-1) Â±20%
     */
    retryDelayFunction(retryCount: number): number;
    /**
     * Check whether a channel is muted
     * @param channel Channel
     * @return Whether it is muted
     * @default false
     */
    channelIsMuted(channel: Channel): boolean;
};
/**
 * Revolt.js Clients
 */
export declare class Client extends AsyncEventEmitter<Events> {
    #private;
    readonly account: AccountCollection;
    readonly bots: BotCollection;
    readonly channels: ChannelCollection;
    readonly channelUnreads: ChannelUnreadCollection;
    readonly channelWebhooks: ChannelWebhookCollection;
    readonly emojis: EmojiCollection;
    readonly messages: MessageCollection;
    readonly servers: ServerCollection;
    readonly serverMembers: ServerMemberCollection;
    readonly sessions: SessionCollection;
    readonly users: UserCollection;
    readonly api: API;
    readonly options: ClientOptions;
    readonly events: EventClient<1>;
    configuration: RevoltConfig | undefined;
    user: User | undefined;
    readonly ready: Accessor<boolean>;
    readonly connectionFailureCount: Accessor<number>;
    /**
     * Create Revolt.js Client
     */
    constructor(options?: Partial<ClientOptions>, configuration?: RevoltConfig);
    /**
     * Current session id
     */
    get sessionId(): string | undefined;
    /**
     * Get authentication header
     */
    get authenticationHeader(): [string, string];
    /**
     * Connect to Revolt
     */
    connect(): void;
    /**
     * Log in with auth data, creating a new session in the process.
     * @param details Login data object
     * @returns An on-boarding function if on-boarding is required, undefined otherwise
     */
    login(details: DataLogin): Promise<void>;
    /**
     * Use an existing session
     */
    useExistingSession(session: Session): void;
    /**
     * Log in as a bot
     * @param token Bot token
     */
    loginBot(token: string): Promise<void>;
    /**
     * Prepare a markdown-based message to be displayed to the user as plain text.
     * @param source Source markdown text
     * @returns Modified plain text
     */
    markdownToText(source: string): string;
    /**
     * Proxy a file through January.
     * @param url URL to proxy
     * @returns Proxied media URL
     */
    proxyFile(url: string): string | undefined;
}
//# sourceMappingURL=Client.d.ts.map