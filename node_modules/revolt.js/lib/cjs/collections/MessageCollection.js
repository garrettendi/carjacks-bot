"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageCollection = void 0;
const index_js_1 = require("../index.js");
const index_js_2 = require("./index.js");
/**
 * Collection of Messages
 */
class MessageCollection extends index_js_2.ClassCollection {
    /**
     * Fetch message by Id
     * @param channelId Channel Id
     * @param messageId Message Id
     * @returns Message
     */
    fetch(channelId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = this.get(messageId);
            if (message && !this.isPartial(messageId))
                return message;
            const data = yield this.client.api.get(`/channels/${channelId}/messages/${messageId}`);
            return this.getOrCreate(data._id, data, false);
        });
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     * @param isNew Whether this object is new
     */
    getOrCreate(id, data, isNew = false) {
        if (this.has(id) && !this.isPartial(id)) {
            return this.get(id);
        }
        else {
            const instance = new index_js_1.Message(this, id);
            this.create(id, "message", instance, this.client, data);
            isNew && this.client.emit("messageCreate", instance);
            return instance;
        }
    }
    /**
     * Get or return partial
     * @param id Id
     */
    getOrPartial(id) {
        if (this.has(id)) {
            return this.get(id);
        }
        else if (this.client.options.partials) {
            const instance = new index_js_1.Message(this, id);
            this.create(id, "message", instance, this.client, {
                id,
                partial: true,
            });
            return instance;
        }
    }
}
exports.MessageCollection = MessageCollection;
