"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerCollection = void 0;
const solid_js_1 = require("solid-js");
const index_js_1 = require("../index.js");
const index_js_2 = require("./index.js");
/**
 * Collection of Servers
 */
class ServerCollection extends index_js_2.ClassCollection {
    /**
     * Fetch server by ID
     *
     * This will not fetch channels!
     * @param id Id
     * @returns Server
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const server = this.get(id);
            if (server && !this.isPartial(id))
                return server;
            const data = yield this.client.api.get(`/servers/${id}`, {
                include_channels: true,
            });
            return (0, solid_js_1.batch)(() => {
                for (const channel of data.channels) {
                    if (typeof channel !== "string") {
                        this.client.channels.getOrCreate(channel._id, channel);
                    }
                }
                return this.getOrCreate(data._id, data);
            });
        });
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     * @param isNew Whether this object is new
     */
    getOrCreate(id, data, isNew = false) {
        if (this.has(id) && !this.isPartial(id)) {
            return this.get(id);
        }
        else {
            const instance = new index_js_1.Server(this, id);
            this.create(id, "server", instance, this.client, data);
            isNew && this.client.emit("serverCreate", instance);
            return instance;
        }
    }
    /**
     * Get or return partial
     * @param id Id
     */
    getOrPartial(id) {
        if (this.has(id)) {
            return this.get(id);
        }
        else if (this.client.options.partials) {
            const instance = new index_js_1.Server(this, id);
            this.create(id, "server", instance, this.client, {
                id,
                partial: true,
            });
            return instance;
        }
    }
    /**
     * Create a server
     * @param data Server options
     * @returns The newly-created server
     */
    createServer(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const { server, channels } = yield this.client.api.post(`/servers/create`, data);
            return (0, solid_js_1.batch)(() => {
                for (const channel of channels) {
                    this.client.channels.getOrCreate(channel._id, channel);
                }
                return this.getOrCreate(server._id, server, true);
            });
        });
    }
}
exports.ServerCollection = ServerCollection;
