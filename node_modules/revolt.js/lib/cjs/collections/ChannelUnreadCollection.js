"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelUnreadCollection = void 0;
const solid_js_1 = require("solid-js");
const ChannelUnread_js_1 = require("../classes/ChannelUnread.js");
const index_js_1 = require("./index.js");
/**
 * Collection of Channel Unreads
 */
class ChannelUnreadCollection extends index_js_1.ClassCollection {
    /**
     * Load unread information from server
     */
    sync() {
        return __awaiter(this, void 0, void 0, function* () {
            const unreads = yield this.client.api.get("/sync/unreads");
            (0, solid_js_1.batch)(() => {
                this.reset();
                for (const unread of unreads) {
                    this.getOrCreate(unread._id.channel, unread);
                }
            });
        });
    }
    /**
     * Clear all unread data
     */
    reset() {
        this.updateUnderlyingObject({});
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     */
    getOrCreate(id, data) {
        if (this.has(id)) {
            return this.get(id);
        }
        else {
            const instance = new ChannelUnread_js_1.ChannelUnread(this, id);
            this.create(id, "channelUnread", instance, this.client, data);
            return instance;
        }
    }
}
exports.ChannelUnreadCollection = ChannelUnreadCollection;
