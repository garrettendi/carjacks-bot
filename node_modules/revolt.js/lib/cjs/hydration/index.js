"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hydrate = exports.UserFlags = exports.UserBadges = exports.ServerFlags = exports.BotFlags = void 0;
const bot_js_1 = require("./bot.js");
const channel_js_1 = require("./channel.js");
const channelUnread_js_1 = require("./channelUnread.js");
const channelWebhook_js_1 = require("./channelWebhook.js");
const emoji_js_1 = require("./emoji.js");
const message_js_1 = require("./message.js");
const server_js_1 = require("./server.js");
const serverMember_js_1 = require("./serverMember.js");
const session_js_1 = require("./session.js");
const user_js_1 = require("./user.js");
var bot_js_2 = require("./bot.js");
Object.defineProperty(exports, "BotFlags", { enumerable: true, get: function () { return bot_js_2.BotFlags; } });
var server_js_2 = require("./server.js");
Object.defineProperty(exports, "ServerFlags", { enumerable: true, get: function () { return server_js_2.ServerFlags; } });
var user_js_2 = require("./user.js");
Object.defineProperty(exports, "UserBadges", { enumerable: true, get: function () { return user_js_2.UserBadges; } });
Object.defineProperty(exports, "UserFlags", { enumerable: true, get: function () { return user_js_2.UserFlags; } });
/**
 * Hydrate some data
 * @param hydration Hydration data
 * @param input Input data
 * @returns Output data
 */
function hydrateInternal(hydration, input, context) {
    return Object.keys(input).reduce((acc, key) => {
        var _a;
        let targetKey, value;
        try {
            targetKey = (_a = hydration.keyMapping[key]) !== null && _a !== void 0 ? _a : key;
            value = hydration.functions[targetKey](input, context);
        }
        catch (err) {
            if (key === "partial")
                return Object.assign(Object.assign({}, acc), { partial: input["partial"] });
            if (key === "type")
                return acc;
            console.debug(`Skipping key ${String(key)} during hydration!`);
            return acc;
        }
        return Object.assign(Object.assign({}, acc), { [targetKey]: value });
    }, {});
}
const hydrators = {
    bot: bot_js_1.botHydration,
    channel: channel_js_1.channelHydration,
    channelUnread: channelUnread_js_1.channelUnreadHydration,
    channelWebhook: channelWebhook_js_1.channelWebhookHydration,
    emoji: emoji_js_1.emojiHydration,
    message: message_js_1.messageHydration,
    server: server_js_1.serverHydration,
    serverMember: serverMember_js_1.serverMemberHydration,
    session: session_js_1.sessionHydration,
    user: user_js_1.userHydration,
};
/**
 * Hydrate some input with a given type
 * @param type Type
 * @param input Input Object
 * @param initial Whether this is the initial hydration
 * @returns Hydrated Object
 */
function hydrate(type, input, context, initial) {
    return hydrateInternal(hydrators[type], initial ? Object.assign(Object.assign({}, hydrators[type].initialHydration()), input) : input, context);
}
exports.hydrate = hydrate;
