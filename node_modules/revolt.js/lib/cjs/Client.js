"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Client_instances, _Client_session, _Client_setReady, _Client_setConnectionFailureCount, _Client_reconnectTimeout, _Client_fetchConfiguration, _Client_updateHeaders;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const solid_js_1 = require("solid-js");
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const revolt_api_1 = require("revolt-api");
const AccountCollection_js_1 = require("./collections/AccountCollection.js");
const index_js_1 = require("./collections/index.js");
const index_js_2 = require("./events/index.js");
const regex_js_1 = require("./lib/regex.js");
/**
 * Revolt.js Clients
 */
class Client extends eventemitter3_1.default {
    /**
     * Create Revolt.js Client
     */
    constructor(options, configuration) {
        super();
        _Client_instances.add(this);
        _Client_session.set(this, void 0);
        _Client_setReady.set(this, void 0);
        _Client_setConnectionFailureCount.set(this, void 0);
        _Client_reconnectTimeout.set(this, void 0);
        this.options = Object.assign({ baseURL: "https://api.revolt.chat", partials: false, eagerFetching: true, syncUnreads: false, autoReconnect: true, messageRewrites: true, 
            /**
             * Retry delay function
             * @param retryCount Count
             * @returns Delay in seconds
             */
            retryDelayFunction(retryCount) {
                return (Math.pow(2, retryCount) - 1) * (0.8 + Math.random() * 0.4);
            },
            /**
             * Check whether a channel is muted
             * @param channel Channel
             * @return Whether it is muted
             */
            channelIsMuted() {
                return false;
            } }, options);
        this.configuration = configuration;
        this.api = new revolt_api_1.API({
            baseURL: this.options.baseURL,
        });
        const [ready, setReady] = (0, solid_js_1.createSignal)(false);
        this.ready = ready;
        __classPrivateFieldSet(this, _Client_setReady, setReady, "f");
        const [connectionFailureCount, setConnectionFailureCount] = (0, solid_js_1.createSignal)(0);
        this.connectionFailureCount = connectionFailureCount;
        __classPrivateFieldSet(this, _Client_setConnectionFailureCount, setConnectionFailureCount, "f");
        this.account = new AccountCollection_js_1.AccountCollection(this);
        this.bots = new index_js_1.BotCollection(this);
        this.channels = new index_js_1.ChannelCollection(this);
        this.channelUnreads = new index_js_1.ChannelUnreadCollection(this);
        this.channelWebhooks = new index_js_1.ChannelWebhookCollection(this);
        this.emojis = new index_js_1.EmojiCollection(this);
        this.messages = new index_js_1.MessageCollection(this);
        this.servers = new index_js_1.ServerCollection(this);
        this.serverMembers = new index_js_1.ServerMemberCollection(this);
        this.sessions = new index_js_1.SessionCollection(this);
        this.users = new index_js_1.UserCollection(this);
        this.events = new index_js_2.EventClient(1, "json", this.options);
        this.events.on("error", (error) => this.emit("error", error));
        this.events.on("state", (state) => {
            switch (state) {
                case index_js_2.ConnectionState.Connected:
                    (0, solid_js_1.batch)(() => {
                        this.servers.forEach((server) => server.resetSyncStatus());
                        __classPrivateFieldGet(this, _Client_setConnectionFailureCount, "f").call(this, 0);
                        this.emit("connected");
                    });
                    break;
                case index_js_2.ConnectionState.Connecting:
                    this.emit("connecting");
                    break;
                case index_js_2.ConnectionState.Disconnected:
                    this.emit("disconnected");
                    if (this.options.autoReconnect) {
                        __classPrivateFieldSet(this, _Client_reconnectTimeout, setTimeout(() => this.connect(), this.options.retryDelayFunction(this.connectionFailureCount()) *
                            1e3), "f");
                        __classPrivateFieldGet(this, _Client_setConnectionFailureCount, "f").call(this, (count) => count + 1);
                    }
                    break;
            }
        });
        this.events.on("event", (event) => (0, index_js_2.handleEventV1)(this, event, __classPrivateFieldGet(this, _Client_setReady, "f")));
    }
    /**
     * Current session id
     */
    get sessionId() {
        var _a;
        return typeof __classPrivateFieldGet(this, _Client_session, "f") === "string" ? undefined : (_a = __classPrivateFieldGet(this, _Client_session, "f")) === null || _a === void 0 ? void 0 : _a._id;
    }
    /**
     * Get authentication header
     */
    get authenticationHeader() {
        var _a;
        return typeof __classPrivateFieldGet(this, _Client_session, "f") === "string"
            ? ["X-Bot-Token", __classPrivateFieldGet(this, _Client_session, "f")]
            : ["X-Session-Token", (_a = __classPrivateFieldGet(this, _Client_session, "f")) === null || _a === void 0 ? void 0 : _a.token];
    }
    /**
     * Connect to Revolt
     */
    connect() {
        var _a, _b;
        clearTimeout(__classPrivateFieldGet(this, _Client_reconnectTimeout, "f"));
        this.events.disconnect();
        __classPrivateFieldGet(this, _Client_setReady, "f").call(this, false);
        this.events.connect((_b = (_a = this.configuration) === null || _a === void 0 ? void 0 : _a.ws) !== null && _b !== void 0 ? _b : "wss://ws.revolt.chat", typeof __classPrivateFieldGet(this, _Client_session, "f") === "string" ? __classPrivateFieldGet(this, _Client_session, "f") : __classPrivateFieldGet(this, _Client_session, "f").token);
    }
    /**
     * Log in with auth data, creating a new session in the process.
     * @param details Login data object
     * @returns An on-boarding function if on-boarding is required, undefined otherwise
     */
    login(details) {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _Client_instances, "m", _Client_fetchConfiguration).call(this);
            const data = yield this.api.post("/auth/session/login", details);
            if (data.result === "Success") {
                __classPrivateFieldSet(this, _Client_session, data, "f");
                // TODO: return await this.connect();
            }
            else {
                throw "MFA not implemented!";
            }
        });
    }
    /**
     * Use an existing session
     */
    useExistingSession(session) {
        return __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldSet(this, _Client_session, session, "f");
            __classPrivateFieldGet(this, _Client_instances, "m", _Client_updateHeaders).call(this);
        });
    }
    /**
     * Log in as a bot
     * @param token Bot token
     */
    loginBot(token) {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _Client_instances, "m", _Client_fetchConfiguration).call(this);
            __classPrivateFieldSet(this, _Client_session, token, "f");
            __classPrivateFieldGet(this, _Client_instances, "m", _Client_updateHeaders).call(this);
            this.connect();
        });
    }
    /**
     * Prepare a markdown-based message to be displayed to the user as plain text.
     * @param source Source markdown text
     * @returns Modified plain text
     */
    markdownToText(source) {
        return source
            .replace(regex_js_1.RE_MENTIONS, (sub, id) => {
            const user = this.users.get(id);
            if (user) {
                return `@${user.username}`;
            }
            return sub;
        })
            .replace(regex_js_1.RE_CHANNELS, (sub, id) => {
            const channel = this.channels.get(id);
            if (channel) {
                return `#${channel.displayName}`;
            }
            return sub;
        })
            .replace(regex_js_1.RE_SPOILER, "<spoiler>");
    }
    /**
     * Proxy a file through January.
     * @param url URL to proxy
     * @returns Proxied media URL
     */
    proxyFile(url) {
        var _a;
        if ((_a = this.configuration) === null || _a === void 0 ? void 0 : _a.features.january.enabled) {
            return `${this.configuration.features.january.url}/proxy?url=${encodeURIComponent(url)}`;
        }
        else {
            return url;
        }
    }
}
exports.Client = Client;
_Client_session = new WeakMap(), _Client_setReady = new WeakMap(), _Client_setConnectionFailureCount = new WeakMap(), _Client_reconnectTimeout = new WeakMap(), _Client_instances = new WeakSet(), _Client_fetchConfiguration = function _Client_fetchConfiguration() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!this.configuration) {
            this.configuration = yield this.api.get("/");
        }
    });
}, _Client_updateHeaders = function _Client_updateHeaders() {
    this.api = new revolt_api_1.API({
        baseURL: this.options.baseURL,
        authentication: {
            revolt: __classPrivateFieldGet(this, _Client_session, "f"),
        },
    });
};
